{{! -------------------------------- }}
{{!    Template for class methods    }}
{{! -------------------------------- }}

{{! Method name. Matches that used in C++. }}
{{# is_static }}static {{/ is_static }}{{ name }}(
{{! Method parameters. Names have been transformed to better fit Typescript by }}
{{!   making the first letter lower-case and removing "In" and "Out" prefixes. }}
{{# parameters }}
    {{ name }}:
{{! If the parameter is a function pointer, translate it to a lambda signature. }}
{{# type.is_function_signature }}
        (
{{# type.function_signature.parameters }}
            {{ name }}: {{# type }}{{> TypeName }}{{/ type }}{{> Comma }}
{{/ type.function_signature.parameters }}
        ) =>
            {{# type.function_signature.return_type }}{{> TypeName }}{{/ type.function_signature.return_type }}
{{/ type.is_function_signature }}
{{! Otherwise, just output the type name. }}
{{^ type.is_function_signature }}
        {{# type }}{{> TypeName }}{{/ type }}{{> Comma }}
{{/ type.is_function_signature }}
{{/ parameters }}
):
{{! Function return type. }}
{{# return_type }}
    {{> TypeName }}
{{/ return_type }} {
{{! For each parameter, check if it is a number. If so, do some range checks. }}
{{# parameters }}
{{# type.is_number }}
{{# type.is_integer }}
{{^ type.is_large }}
    assert(Number.isInteger({{ name }}));
{{/ type.is_large }}
{{/ type.is_integer }}
    assert({{ name }} >= {{ type.min_value }});
    assert({{ name }} <= {{ type.max_value }});
{{/ type.is_number }}
{{/ parameters }}
{{! Get function pointers for any closures. }}
{{# parameters }}
{{# type.is_function_signature }}
    var _{{ name }} = (
        _stateObject__: number,
{{# type.function_signature.parameters }}
        {{ name }}{{> Comma }}
{{/ type.function_signature.parameters }}
    ) => {
{{# type.function_signature.parameters }}
{{# type.is_class_or_interface }}
        var _{{ name }} = new {{# type }}{{> TypeName }}{{/ type }}(
            getNativePointer(
                {{ name }}
            )
{{# type.template_arguments }}
            ,
            {{> Template/ConstructorArguments }}
{{/ type.template_arguments }}
        );
{{/ type.is_class_or_interface }}
{{/ type.function_signature.parameters }}

        {{ name }}(
{{# type.function_signature.parameters }}
        {{# type.is_class_or_interface }}_{{/ type.is_class_or_interface }}{{ name }}{{> Comma }}
{{/ type.function_signature.parameters }}
        );
    };

    var {{ name }}Ptr = Module.addFunction(
        _{{ name }},
        "{{# return_type }}{{# is_void }}v{{/ is_void }}{{^ is_void }}{{> Method/TypeShorthand }}{{/ is_void }}{{/ return_type }}i{{# type.function_signature.parameters }}{{# type }}{{> Method/TypeShorthand }}{{/ type }}{{/ type.function_signature.parameters }}"
    );
{{/ type.is_function_signature }}
{{/ parameters }}
{{! Allocate memory for return value if function returns NativePointer. }}
{{# return_type.is_pointer_or_reference }}
    var _ret = Module._malloc(8);
{{/ return_type.is_pointer_or_reference }}
{{^ return_type.is_pointer_or_reference }}
{{# return_type.is_class_or_interface }}
    var _ret = Module._malloc(8);
{{/ return_type.is_class_or_interface }}
{{/ return_type.is_pointer_or_reference }}
{{! Call the C function with ccall, which handles marshalling some types for us. }}
    {{# return_type }}{{^ is_void }}{{^ is_pointer_or_reference }}{{^ is_class_or_interface }}return {{/ is_class_or_interface }}{{/ is_pointer_or_reference }}{{/ is_void }}{{/ return_type }}Module.ccall(
        "{{ unique_name }}",
{{! Output the return type of the ccall call. }}
{{# return_type }}
{{# is_pointer_or_reference }}
        "void",
{{/ is_pointer_or_reference }}
{{^ is_pointer_or_reference }}
{{# is_class_or_interface }}
        "void",
{{/ is_class_or_interface }}
{{^ is_class_or_interface }}
{{# is_enum }}
        "number",
{{/ is_enum }}
{{^ is_enum }}
        "{{ name }}",
{{/ is_enum }}
{{/ is_class_or_interface }}
{{/ is_pointer_or_reference }}
{{/ return_type }}
        [
{{# return_type.is_pointer_or_reference }}
            "number",
{{/ return_type.is_pointer_or_reference }}
{{^ return_type.is_pointer_or_reference }}
{{# return_type.is_class_or_interface }}
            "number",
{{/ return_type.is_class_or_interface }}
{{/ return_type.is_pointer_or_reference }}
            {{^ is_static }}"number",{{/ is_static }}
{{# parameters }}
            "{{ type.call_param_type }}"
            ,
{{/ parameters }}
        ],
        [
{{# return_type.is_pointer_or_reference }}
            _ret,
{{/ return_type.is_pointer_or_reference }}
{{^ return_type.is_pointer_or_reference }}
{{# return_type.is_class_or_interface }}
            _ret,
{{/ return_type.is_class_or_interface }}
{{/ return_type.is_pointer_or_reference }}
            {{^ is_static }}this.pointer,{{/ is_static }}
{{# parameters }}
{{# type.is_function_signature }}
            {{ name }}Ptr,
{{/ type.is_function_signature }}
{{^ type.is_function_signature }}
{{# type.is_interface }}
{{# type.is_pointer_or_reference }}
            ({{ name }} as unknown as NativeClassWrapper).pointer
{{/ type.is_pointer_or_reference }}
{{/ type.is_interface }}
{{^ type.is_interface }}
            {{ name }}{{ type.call_param_name_suffix }}
{{/ type.is_interface }}
            ,
{{/ type.is_function_signature }}
{{/ parameters }}
        ]
    );
{{# return_type }}
{{# is_pointer_or_reference }}
{{# is_void_pointer }}
    var _nPtr = getNativePointer(_ret).pointer;
{{/ is_void_pointer }}
{{^ is_void_pointer }}
    var _nPtr = new {{> TypeName }}
        (
            getNativePointer(_ret)
{{# template_arguments }}
            ,
            {{> Template/ConstructorArguments }}
{{/ template_arguments }}
        );
{{/ is_void_pointer }}
    Module._free(_ret);
    return _nPtr;
{{/ is_pointer_or_reference }}
{{^ is_pointer_or_reference }}
{{# is_class_or_interface }}
    var _nPtr = new {{> TypeName }}(
        getNativePointer(_ret)
{{# template_arguments }}
            ,
        {{> Template/ConstructorArguments }}
{{/ template_arguments }}
    );
    Module._free(_ret);
    return _nPtr;
{{/ is_class_or_interface }}
{{/ is_pointer_or_reference }}
{{/ return_type }}
}
